Phase 2 Testing:
Our testing for phase two built off of the work we did in the previous parts. First,
we created a series of unit tests that explored all functionality of the new requests.
This is listed as follows:
- A REGISTER request FAILS if it is sent during a currently running session
- A REGISTER request FAILS if the user is already registered
- All non-REGISTER requests FAIL if the user is not registered
- A LOGIN request FAILS if it contains the wrong password
- A CHANGEPASS request FAILS and ENDS the session if the old password is incorrectly entered *

Our tests are as follows:
1. Successful normal path
{“uid”: “Serena”, “op”: “REGISTER”, “pass”: “password”}
{“uid”: “Serena”, “op”: “LOGIN”, “pass”: “password”}
// phase 0 tests - should return OK
{“op”: “LOGOUT”}

2. Successful change password path + checking that the password does indeed change
{“uid”: “Kevin”, “op”: “REGISTER”, “pass”: “password”}
{“uid”: “Kevin”, “op”: “LOGIN”, “pass”: “password”}
{“op”: “CHANGE_PASS”, “old_pass”: “password”, “new_pass”: “newpassword”}
// phase 0 tests - should return OK
{“op”: “LOGOUT”}
{“uid”: “Kevin”, “op”: “REGISTER”, “pass”: “password”} // FAIL - verify user still exists
{“uid”: “Kevin”, “op”: “LOGIN”, “pass”: “password”} // FAIL - verify old password is gone
{“uid”: “Kevin”, “op”: “LOGIN”, “pass”: “newpassword”} // OK

3. Authenticate without registration should FAIL
{“uid”: “Marcus”, “op”: “LOGIN”, “pass”: “password”} // FAIL

4. Re-registering should FAIL
{“uid”: “Mika”, “op”: “REGISTER”, “pass”: “password123”} // OK
{“uid”: “Mika”, “op”: “REGISTER”, “pass”: “password456”} // FAIL

5. Repeated LOGIN should FAIL
{“uid”: “Sam”, “op”: “REGISTER”, “pass”: “spam”}
{“uid”: “Sam”, “op”: “LOGIN”, “pass”: “spam”}
{“uid”: “Sam”, “op”: “LOGIN”, “pass”: “spam”} // FAIL - Sam is already in active session

6. LOGIN with incorrect password should FAIL
{“uid”: “Jianna”, “op”: “REGISTER”, “pass”: “sheep”}
{“uid”: “Jianna”, “op”: “LOGIN”, “pass”: “notsheep”} // FAIL

7. CHANGE_PASS with an incorrect old_pass should FAIL and EXIT
{“uid”: “Laura”, “op”: “REGISTER”, “pass”: “password”}
{“uid”: “Laura”, “op”: “LOGIN”, “pass”: “password”}
{“op”: “CHANGE_PASS”, “old_pass”: “wrongpassword”, “new_pass”: “newpassword”} // FAIL
{“op”: “LOGOUT”} // FAIL -> session ended
{“uid”: “Laura”, “op”: “LOGIN”, “pass”: “newpassword”} // FAIL, password did not change

8. Registering another user during an active session should FAIL
{"uid": "Mika", "op": "REGISTER", "pass": "password123"} // OK
{"uid": "Mika", "op": "LOGIN", "pass": "password123"}
{"uid": "mus1cl0v3r", "op": "REGISTER", "pass": "bachtothefuture"} // FAIL

* We decided on this behavior as an incorrect old password could indicate that the users session
has been taken over by a malicious actor, so we should block all further requests and make
them reauthenticate.

Phase 1 Testing:
The testing for phase 1 of this project was conducted in two parts. First, we repeated all of the tests from phase 0 as none of the original
functionality should be broken by our additional implementation in phase 1. This is because phase 1 only ensures that the communications between
client and server are secure, meaning the communications should still be conducted on the user end in the same exact way as they saw in phase 0 
since the user cannot see any of the backend encryption. Therefore, listed below is all of our tests from phase 0 and the corresponding explanations.
The second part of testing involved creating a new network that involved attacks from a Dolev-Yao attacker. This is included in a folder called 
attack_network. When running this network, an attack is performed every time on either the request or response. There are two types of attacks conducted
on both requests and responses. These attacks include replay attacks which take a previously stored request/response and resend it to the client/server
channel and attacks that modify requests/responses either before they are sent to the server or before they are received by the client. No matter what  
the input from the user is, any request/response run from this network file should result in a FAIL.

Phase 0 Testing:

A correct program should:
- Fail if the client has not yet sent a LOGIN request
- Fail if the client has started a session and tries to LOGIN again
- Fail if the client submits any request (other than LOGIN) after sending LOGOUT
- Fail if the client tries to copy to/from a key not in the key-value store
- Copy the value from src_key into dst_key on a COPY instruction
- Echo the initial uid used to sign in for each instruction, irregardless of any user-provided uid

After extending the existing code, I made sure to thoroughly test my implementation
to ensure correct behavior for each of the scenarios above. I constructed the following
scenarios and ran them via the interactive mode. If my program did not exhibit the stated
correct behavior, I went back to my code and fixed the issue.
1: I attempted to run a READ/WRITE/LOGOUT/COPY/CREATE/DELETE/LOGOUT request before running a LOGIN request.
Correct behavior: fail, echo an empty uid.
2: I tried running two LOGIN instructions back to back. 
Correct behavior: first instruction succeeds, second fails. Both echo the original uid.
3: I tried running a READ/WRITE/LOGOUT/COPY/CREATE/DELETE request after a LOGOUT request.
Correct behavior: THe first succeeds and echos the original uid. The second request failed and echoed an empty uid. 
4: I tried running a LOGIN request after a LOGOUT request. 
Correct behavior: Both succeed, the LOGOUT echos the original uid and the LOGIN echos the new uid.
5: While logged in, I ran a COPY instruction with an invalid source key.
Correct behavior: Fails, echos my uid.
6: While logged in, I ran a COPY instruction with an invalid destination key.
Correct behavior: Fails, echos my uid.
7: While logged in, I ran a COPY instruction with a invalid destination and source keys.
Correct behavior: Fails, echos my uid.
8: While logged in, I ran a COPY instruction with valid source/destination keys, then requested READs to the source and destination keys
Correct behavior: All requests succeed, both READs return the source keys original value. All requests echo my uid.

These tests cover the full functionality of the added operations. Tests 1 and 2 ensure that the server only responds to a logged in user
and does not allow a client to run more than one session at a time. Tests 3 and 4 ensure that LOGOUT ends the session
and that the uid is properly echoed while the session is running, but not after the session ends. Tests 5 - 8
ensure that COPY instructions behave as expected (fail if one/both keys are invalid) and correctly copy the data
from the source to the destination.

After I ensured my extensions behaved properly, I ran some tests for READ/CREATE/DELETE/WRITE
operations while logged in to ensure that nothing was broken. To test these instructions, I ran the following
sequence of requests (via file this time)
{"op":"LOGIN", "uid":"Serena"}
{"op":"CREATE", "key":"kevin", "val": "senior"}
{"op":"CREATE", "key":"serena", "val": "junior"}
{"op":"READ", "key":"serena"}
{"op":"DELETE", "key":"serena"}
{"op":"READ", "key":"serena"}
{"op":"WRITE", "key":"serena", "val": "anything"}
{"op":"WRITE", "key":"kevin", "val": "grad"}
{"op":"READ", "key":"kevin"}
{"op":"LOGOUT"}

Expected Output:
{"status":"OK","val":null,"uid":"Serena"}
{"status":"OK","val":null,"uid":"Serena"}
{"status":"OK","val":null,"uid":"Serena"}
{"status":"OK","val":"junior","uid":"Serena"} //read after create returns initial value
{"status":"OK","val":null,"uid":"Serena"}
{"status":"FAIL","val":null,"uid":"Serena"} //read after delete fails
{"status":"FAIL","val":null,"uid":"Serena"} //write after delete fails
{"status":"OK","val":null,"uid":"Serena"} 
{"status":"OK","val":"grad","uid":"Serena"} //read after write returns updated value
{"status":"OK","val":null,"uid":"Serena"}
