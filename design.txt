One of the main design decisions made was creating a new type called key_metadata to contain all of the new metadata necessary for this phase of the assignment. Therefore, our server now keeps track of the keys in a map of strings as keys to their respective metadata, which includes the value, access control lists for: readers, writers, copyfroms, copytos, and indirects, and the owner of the key. The main functionality that had to change from phase 2 to phase 3 was the checking of the key's access control lists for whatever desired function from the operation. For example, making sure the uid is in the read access control list for a key if a user requests to read a key. The Delete, MODACL, and REVACL functions additionally check to make sure the user who requests the operation is the owner of the key in order to successfully perform the operation. The efficiency of our code in generating R, W, C_src, and C_dst comes from two main design decisions. The first decision made was to only update an access control list when it is required to be checked by a request sent in by the client. In other words, if an indirect key updates its own access control list, the other keys that it is an indirect for won't update their respective lists. It would require a lot of unnecessary computations to update all access control lists every time an indirect changes its own list because a list could change again before it is ever required to be looked at. Only generating updated lists when required allows for the minimum number of computations. The second design decision to allow for ultimate efficiency was the use of memoization in when generating access control lists. Since our generateACL_helper function uses recursion based on indirects, keeping track of what keys have already called the function means we aren't unnecessarily calling the function on keys that lists have already been computed for. 