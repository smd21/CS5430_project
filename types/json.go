// Code generated by "enumer -json -text -output=types/json.go -type=Operation,Code types/"; DO NOT EDIT.

package types

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _OperationName = "NOOPCREATEDELETEREADWRITECOPYLOGINLOGOUT"

var _OperationIndex = [...]uint8{0, 4, 10, 16, 20, 25, 29, 34, 40}

const _OperationLowerName = "noopcreatedeletereadwritecopyloginlogout"

func (i Operation) String() string {
	if i < 0 || i >= Operation(len(_OperationIndex)-1) {
		return fmt.Sprintf("Operation(%d)", i)
	}
	return _OperationName[_OperationIndex[i]:_OperationIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OperationNoOp() {
	var x [1]struct{}
	_ = x[NOOP-(0)]
	_ = x[CREATE-(1)]
	_ = x[DELETE-(2)]
	_ = x[READ-(3)]
	_ = x[WRITE-(4)]
	_ = x[COPY-(5)]
	_ = x[LOGIN-(6)]
	_ = x[LOGOUT-(7)]
}

var _OperationValues = []Operation{NOOP, CREATE, DELETE, READ, WRITE, COPY, LOGIN, LOGOUT}

var _OperationNameToValueMap = map[string]Operation{
	_OperationName[0:4]:        NOOP,
	_OperationLowerName[0:4]:   NOOP,
	_OperationName[4:10]:       CREATE,
	_OperationLowerName[4:10]:  CREATE,
	_OperationName[10:16]:      DELETE,
	_OperationLowerName[10:16]: DELETE,
	_OperationName[16:20]:      READ,
	_OperationLowerName[16:20]: READ,
	_OperationName[20:25]:      WRITE,
	_OperationLowerName[20:25]: WRITE,
	_OperationName[25:29]:      COPY,
	_OperationLowerName[25:29]: COPY,
	_OperationName[29:34]:      LOGIN,
	_OperationLowerName[29:34]: LOGIN,
	_OperationName[34:40]:      LOGOUT,
	_OperationLowerName[34:40]: LOGOUT,
}

var _OperationNames = []string{
	_OperationName[0:4],
	_OperationName[4:10],
	_OperationName[10:16],
	_OperationName[16:20],
	_OperationName[20:25],
	_OperationName[25:29],
	_OperationName[29:34],
	_OperationName[34:40],
}

// OperationString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OperationString(s string) (Operation, error) {
	if val, ok := _OperationNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OperationNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Operation values", s)
}

// OperationValues returns all values of the enum
func OperationValues() []Operation {
	return _OperationValues
}

// OperationStrings returns a slice of all String values of the enum
func OperationStrings() []string {
	strs := make([]string, len(_OperationNames))
	copy(strs, _OperationNames)
	return strs
}

// IsAOperation returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Operation) IsAOperation() bool {
	for _, v := range _OperationValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Operation
func (i Operation) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Operation
func (i *Operation) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Operation should be a string, got %s", data)
	}

	var err error
	*i, err = OperationString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Operation
func (i Operation) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Operation
func (i *Operation) UnmarshalText(text []byte) error {
	var err error
	*i, err = OperationString(string(text))
	return err
}

const _CodeName = "OKFAIL"

var _CodeIndex = [...]uint8{0, 2, 6}

const _CodeLowerName = "okfail"

func (i Code) String() string {
	if i < 0 || i >= Code(len(_CodeIndex)-1) {
		return fmt.Sprintf("Code(%d)", i)
	}
	return _CodeName[_CodeIndex[i]:_CodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CodeNoOp() {
	var x [1]struct{}
	_ = x[OK-(0)]
	_ = x[FAIL-(1)]
}

var _CodeValues = []Code{OK, FAIL}

var _CodeNameToValueMap = map[string]Code{
	_CodeName[0:2]:      OK,
	_CodeLowerName[0:2]: OK,
	_CodeName[2:6]:      FAIL,
	_CodeLowerName[2:6]: FAIL,
}

var _CodeNames = []string{
	_CodeName[0:2],
	_CodeName[2:6],
}

// CodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CodeString(s string) (Code, error) {
	if val, ok := _CodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Code values", s)
}

// CodeValues returns all values of the enum
func CodeValues() []Code {
	return _CodeValues
}

// CodeStrings returns a slice of all String values of the enum
func CodeStrings() []string {
	strs := make([]string, len(_CodeNames))
	copy(strs, _CodeNames)
	return strs
}

// IsACode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Code) IsACode() bool {
	for _, v := range _CodeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Code
func (i Code) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Code
func (i *Code) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Code should be a string, got %s", data)
	}

	var err error
	*i, err = CodeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Code
func (i Code) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Code
func (i *Code) UnmarshalText(text []byte) error {
	var err error
	*i, err = CodeString(string(text))
	return err
}
